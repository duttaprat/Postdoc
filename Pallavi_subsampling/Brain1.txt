Brain
(17382, 163725)
Index(['ENST00000373020.8', 'ENST00000494424.1', 'ENST00000496771.5',
       'ENST00000612152.4', 'ENST00000614008.4', 'ENST00000373031.4',
       'ENST00000485971.1', 'ENST00000371582.8', 'ENST00000371584.8',
       'ENST00000371588.9',
       ...
       'ENST00000640157.1', 'ENST00000640623.1', 'ENST00000640630.1',
       'ENST00000638486.1', 'ENST00000381568.9', 'ENST00000622217.1',
       'ENST00000408734.1', 'ENST00000385204.1', 'ENST00000583027.1',
       'ENST00000638236.1'],
      dtype='object', length=163723)
163723
sample_class
Adipose_Tissue     1204
Adrenal_Gland       258
Bladder              21
Blood               929
Blood_Vessel       1335
Brain              2642
Breast              459
Cervix_Uteri         19
Colon               779
Esophagus          1445
Fallopian_Tube        9
Heart               861
Kidney               89
Liver               226
Lung                578
Muscle              803
Nerve               619
Ovary               180
Pancreas            328
Pituitary           283
Prostate            245
Salivary_Gland      162
Skin               1809
Small_Intestine     187
Spleen              241
Stomach             359
Testis              361
Thyroid             653
Uterus              142
Vagina              156
dtype: int64
#$@ 0
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 2078.9712812900543 seconds ---
#$@ 1
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 4157.147664308548 seconds ---
#$@ 2
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 6239.3288288116455 seconds ---
#$@ 3
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 8322.305786132812 seconds ---
#$@ 4
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 10404.034173488617 seconds ---
#$@ 5
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 12485.393062114716 seconds ---
#$@ 6
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 14567.417985200882 seconds ---
#$@ 7
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 16645.303962230682 seconds ---
#$@ 8
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 18724.944593429565 seconds ---
#$@ 9
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 20798.055325746536 seconds ---
#$@ 10
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 22876.762122392654 seconds ---
#$@ 11
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 24949.741938829422 seconds ---
#$@ 12
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 27016.777822732925 seconds ---
#$@ 13
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 29096.90764427185 seconds ---
#$@ 14
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 31167.476177453995 seconds ---
#$@ 15
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 33248.75754928589 seconds ---
#$@ 16
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 35319.20696115494 seconds ---
#$@ 17
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 37393.320462703705 seconds ---
#$@ 18
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 39465.38370227814 seconds ---
#$@ 19
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 41543.084171295166 seconds ---
#$@ 20
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 43614.81528496742 seconds ---
#$@ 21
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 45683.893122673035 seconds ---
#$@ 22
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 47756.93762087822 seconds ---
#$@ 23
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 49826.833099365234 seconds ---
#$@ 24
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 51901.527581214905 seconds ---
#$@ 25
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 53974.37403964996 seconds ---
#$@ 26
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 56049.22830605507 seconds ---
#$@ 27
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 58124.684401512146 seconds ---
#$@ 28
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 60203.17055249214 seconds ---
#$@ 29
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 62271.8547167778 seconds ---
#$@ 30
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 64369.659929037094 seconds ---
#$@ 31
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 66448.59050178528 seconds ---
#$@ 32
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 68526.23431777954 seconds ---
#$@ 33
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 70604.27218151093 seconds ---
#$@ 34
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 72683.32631421089 seconds ---
#$@ 35
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 74745.89170002937 seconds ---
#$@ 36
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 76825.868871212 seconds ---
#$@ 37
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 78904.67429709435 seconds ---
#$@ 38
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 80982.6320464611 seconds ---
#$@ 39
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 83057.3662097454 seconds ---
#$@ 40
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 85134.11208701134 seconds ---
#$@ 41
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 87202.30399942398 seconds ---
#$@ 42
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 89281.74894857407 seconds ---
#$@ 43
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 91349.97103834152 seconds ---
#$@ 44
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 93432.26724362373 seconds ---
#$@ 45
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 95508.1376888752 seconds ---
#$@ 46
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 97583.32043862343 seconds ---
#$@ 47
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 99656.47894454002 seconds ---
#$@ 48
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 101726.22263360023 seconds ---
#$@ 49
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 103797.74910998344 seconds ---
#$@ 50
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 105886.38151741028 seconds ---
#$@ 51
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 107955.52809500694 seconds ---
#$@ 52
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 110035.85816216469 seconds ---
#$@ 53
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 112152.09688520432 seconds ---
#$@ 54
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 114219.13253617287 seconds ---
#$@ 55
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 116291.52541971207 seconds ---
#$@ 56
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 118387.99563622475 seconds ---
#$@ 57
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 120466.39663124084 seconds ---
#$@ 58
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 122537.87041807175 seconds ---
#$@ 59
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 124609.6413064003 seconds ---
#$@ 60
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 126678.33476543427 seconds ---
#$@ 61
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 128758.3766348362 seconds ---
#$@ 62
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 130831.34395599365 seconds ---
#$@ 63
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 132905.5984070301 seconds ---
#$@ 64
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 135002.62768363953 seconds ---
#$@ 65
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 137075.99465346336 seconds ---
#$@ 66
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 139191.81526327133 seconds ---
#$@ 67
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 141265.72934913635 seconds ---
#$@ 68
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 143347.86245155334 seconds ---
#$@ 69
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 145416.0182545185 seconds ---
#$@ 70
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 147495.45172548294 seconds ---
#$@ 71
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 149578.5414106846 seconds ---
#$@ 72
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 151639.77617883682 seconds ---
#$@ 73
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 153719.76121926308 seconds ---
#$@ 74
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 155784.80870103836 seconds ---
#$@ 75
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 157858.07767629623 seconds ---
#$@ 76
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 160050.61181211472 seconds ---
#$@ 77
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 162148.17337107658 seconds ---
#$@ 78
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 164218.1111521721 seconds ---
#$@ 79
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 166318.58150577545 seconds ---
#$@ 80
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 168390.40436816216 seconds ---
#$@ 81
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 170466.1275999546 seconds ---
#$@ 82
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 172543.51462173462 seconds ---
#$@ 83
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 174627.59968972206 seconds ---
#$@ 84
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 176740.7192416191 seconds ---
#$@ 85
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 178821.34790444374 seconds ---
#$@ 86
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 180907.51499938965 seconds ---
#$@ 87
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 182993.08641815186 seconds ---
#$@ 88
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 185074.83282613754 seconds ---
#$@ 89
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 187161.8470337391 seconds ---
#$@ 90
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 189262.02800440788 seconds ---
#$@ 91
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 191340.37031435966 seconds ---
#$@ 92
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 193412.99583745003 seconds ---
#$@ 93
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 195482.99731826782 seconds ---
#$@ 94
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 197558.63278341293 seconds ---
#$@ 95
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 199638.89698028564 seconds ---
#$@ 96
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 201708.46578025818 seconds ---
#$@ 97
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 203787.59186935425 seconds ---
#$@ 98
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
--- 205850.8354253769 seconds ---
#$@ 99
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 207933.0540316105 seconds ---
#$@ 100
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 210068.95766448975 seconds ---
#$@ 101
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 212141.13346409798 seconds ---
#$@ 102
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 214209.21377396584 seconds ---
#$@ 103
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 216283.57291173935 seconds ---
#$@ 104
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 218357.44607234 seconds ---
#$@ 105
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 220435.9891591072 seconds ---
#$@ 106
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 222503.81302189827 seconds ---
#$@ 107
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 224574.7144753933 seconds ---
#$@ 108
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 226650.01107931137 seconds ---
#$@ 109
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 228730.0327217579 seconds ---
#$@ 110
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 230835.4479124546 seconds ---
#$@ 111
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 232930.26161932945 seconds ---
#$@ 112
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 235018.61001253128 seconds ---
#$@ 113
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 237130.79248547554 seconds ---
#$@ 114
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 239217.19560289383 seconds ---
#$@ 115
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 241321.9164261818 seconds ---
#$@ 116
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 243411.6986181736 seconds ---
#$@ 117
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 245496.7498819828 seconds ---
#$@ 118
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 247594.18833112717 seconds ---
#$@ 119
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 249693.63363170624 seconds ---
#$@ 120
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 251780.2486114502 seconds ---
#$@ 121
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 253883.53864073753 seconds ---
#$@ 122
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 255981.05071902275 seconds ---
#$@ 123
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 258071.58624649048 seconds ---
#$@ 124
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 260161.23375868797 seconds ---
#$@ 125
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 262266.67692923546 seconds ---
#$@ 126
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 264347.01071357727 seconds ---
#$@ 127
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 266446.0749104023 seconds ---
#$@ 128
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 268539.2327039242 seconds ---
#$@ 129
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 270626.5891902447 seconds ---
#$@ 130
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 272705.0193274021 seconds ---
#$@ 131
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 274831.3712248802 seconds ---
#$@ 132
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 276908.0255241394 seconds ---
#$@ 133
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 278988.2749261856 seconds ---
#$@ 134
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 281065.2977733612 seconds ---
#$@ 135
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 283145.64731645584 seconds ---
#$@ 136
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 285220.4468796253 seconds ---
#$@ 137
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 287307.31852293015 seconds ---
#$@ 138
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 289377.87922525406 seconds ---
#$@ 139
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 291470.0308954716 seconds ---
#$@ 140
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 293555.7408077717 seconds ---
#$@ 141
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 295630.8748216629 seconds ---
#$@ 142
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 297710.6301472187 seconds ---
#$@ 143
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 299786.7662241459 seconds ---
#$@ 144
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 301868.8721859455 seconds ---
#$@ 145
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 303943.93686008453 seconds ---
#$@ 146
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 306027.3304669857 seconds ---
#$@ 147
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 308097.4055597782 seconds ---
#$@ 148
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 310176.4666159153 seconds ---
#$@ 149
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 312254.03339600563 seconds ---
#$@ 150
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 314332.23551750183 seconds ---
#$@ 151
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 316405.89860391617 seconds ---
#$@ 152
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 318486.80790257454 seconds ---
#$@ 153
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 320561.2522139549 seconds ---
#$@ 154
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 322647.03169870377 seconds ---
#$@ 155
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 324727.9812877178 seconds ---
#$@ 156
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 326807.7844648361 seconds ---
#$@ 157
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 328885.8248910904 seconds ---
#$@ 158
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 330974.01532125473 seconds ---
#$@ 159
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 333045.228045702 seconds ---
#$@ 160
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 335127.37821531296 seconds ---
#$@ 161
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 337200.1941945553 seconds ---
#$@ 162
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 339276.6226732731 seconds ---
#$@ 163
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 341363.28515934944 seconds ---
#$@ 164
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 343443.87267899513 seconds ---
#$@ 165
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 345509.79430913925 seconds ---
#$@ 166
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 347585.5634109974 seconds ---
#$@ 167
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 349668.2706179619 seconds ---
#$@ 168
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 351746.7789142132 seconds ---
#$@ 169
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 353851.56988191605 seconds ---
#$@ 170
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 355934.0706720352 seconds ---
#$@ 171
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 358019.5948174 seconds ---
#$@ 172
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 360093.8208460808 seconds ---
#$@ 173
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 362176.6468372345 seconds ---
#$@ 174
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 364254.5673801899 seconds ---
#$@ 175
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 366331.79565405846 seconds ---
#$@ 176
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 368411.7731888294 seconds ---
#$@ 177
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 370495.23195791245 seconds ---
#$@ 178
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 372574.95073103905 seconds ---
#$@ 179
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 374652.9220263958 seconds ---
#$@ 180
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 376736.6077327728 seconds ---
#$@ 181
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 378815.821082592 seconds ---
#$@ 182
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 380897.4333846569 seconds ---
#$@ 183
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 382969.74305844307 seconds ---
#$@ 184
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 385058.9651477337 seconds ---
#$@ 185
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 387144.26183724403 seconds ---
#$@ 186
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 389216.882338047 seconds ---
#$@ 187
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 391299.52302002907 seconds ---
#$@ 188
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 393372.1315770149 seconds ---
#$@ 189
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 395451.5388998985 seconds ---
#$@ 190
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 397527.5179877281 seconds ---
#$@ 191
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 399607.37565255165 seconds ---
#$@ 192
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 401683.0088427067 seconds ---
#$@ 193
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 403758.8316977024 seconds ---
#$@ 194
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 405835.7319674492 seconds ---
#$@ 195
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 407908.9817671776 seconds ---
#$@ 196
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 409988.6225936413 seconds ---
#$@ 197
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 412074.03742694855 seconds ---
#$@ 198
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 414143.3846914768 seconds ---
#$@ 199
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 416228.8755226135 seconds ---
#$@ 200
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 418456.2937679291 seconds ---
#$@ 201
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 420540.5007059574 seconds ---
#$@ 202
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 422612.79720950127 seconds ---
#$@ 203
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 424695.95932745934 seconds ---
#$@ 204
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 426772.05857539177 seconds ---
#$@ 205
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 428856.71346998215 seconds ---
#$@ 206
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 430931.34830474854 seconds ---
#$@ 207
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 433016.3151702881 seconds ---
#$@ 208
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 435090.22025823593 seconds ---
#$@ 209
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 437173.66427755356 seconds ---
#$@ 210
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 439248.9073212147 seconds ---
#$@ 211
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 441329.2610936165 seconds ---
#$@ 212
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 443403.34435486794 seconds ---
#$@ 213
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 445482.1955688 seconds ---
#$@ 214
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 447554.0415613651 seconds ---
#$@ 215
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 449632.5683810711 seconds ---
#$@ 216
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 451710.35100364685 seconds ---
#$@ 217
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 453785.4346687794 seconds ---
#$@ 218
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 455860.7526676655 seconds ---
#$@ 219
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 457945.70605397224 seconds ---
#$@ 220
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 460026.11141991615 seconds ---
#$@ 221
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 462110.9197523594 seconds ---
#$@ 222
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 464190.0770523548 seconds ---
#$@ 223
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 466275.3342516422 seconds ---
#$@ 224
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 468354.0978412628 seconds ---
#$@ 225
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 470434.3936908245 seconds ---
#$@ 226
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 472511.8685083389 seconds ---
#$@ 227
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 474596.38998913765 seconds ---
#$@ 228
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 476672.3861606121 seconds ---
#$@ 229
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 478761.4398033619 seconds ---
#$@ 230
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 480838.824447155 seconds ---
#$@ 231
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 482927.59736418724 seconds ---
#$@ 232
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 485001.4630923271 seconds ---
#$@ 233
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 487091.3551158905 seconds ---
#$@ 234
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 489162.6864724159 seconds ---
#$@ 235
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 491249.222104311 seconds ---
#$@ 236
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 493326.74557995796 seconds ---
#$@ 237
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 495403.93658685684 seconds ---
#$@ 238
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 497481.94947981834 seconds ---
#$@ 239
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 499562.79549622536 seconds ---
#$@ 240
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 501641.26822280884 seconds ---
#$@ 241
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 503718.88571333885 seconds ---
#$@ 242
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 505805.2875776291 seconds ---
#$@ 243
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 507878.59289336205 seconds ---
#$@ 244
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 509947.61205244064 seconds ---
#$@ 245
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 512024.02127480507 seconds ---
#$@ 246
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 514093.7081861496 seconds ---
#$@ 247
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 516167.698587656 seconds ---
#$@ 248
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 518242.4830868244 seconds ---
#$@ 249
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 520320.24184918404 seconds ---
#$@ 250
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 522402.110363245 seconds ---
#$@ 251
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 524479.9605693817 seconds ---
#$@ 252
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 526556.3937892914 seconds ---
#$@ 253
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 528640.9100060463 seconds ---
#$@ 254
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 530720.1866621971 seconds ---
#$@ 255
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 532800.8488588333 seconds ---
#$@ 256
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 534879.9903628826 seconds ---
#$@ 257
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 537031.1796770096 seconds ---
#$@ 258
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 539108.0360851288 seconds ---
#$@ 259
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 541184.8344922066 seconds ---
#$@ 260
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 543259.2832043171 seconds ---
#$@ 261
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 545336.079464674 seconds ---
#$@ 262
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 547413.0850389004 seconds ---
#$@ 263
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 549494.9455103874 seconds ---
#$@ 264
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 551564.8950121403 seconds ---
#$@ 265
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 553642.9851107597 seconds ---
#$@ 266
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 555719.9357404709 seconds ---
#$@ 267
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 557806.5070295334 seconds ---
#$@ 268
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 559885.0175528526 seconds ---
#$@ 269
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 561961.7660303116 seconds ---
#$@ 270
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 564045.2029247284 seconds ---
#$@ 271
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 566119.2013554573 seconds ---
#$@ 272
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 568198.3918402195 seconds ---
#$@ 273
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 570274.4622871876 seconds ---
#$@ 274
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 572358.6313817501 seconds ---
#$@ 275
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 574422.8538208008 seconds ---
#$@ 276
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 576511.9209284782 seconds ---
#$@ 277
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 578585.6857295036 seconds ---
#$@ 278
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 580671.6429519653 seconds ---
#$@ 279
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 582746.2610316277 seconds ---
#$@ 280
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 584831.3471136093 seconds ---
#$@ 281
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 586905.9222717285 seconds ---
#$@ 282
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 588991.7894594669 seconds ---
#$@ 283
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 591066.6777501106 seconds ---
#$@ 284
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 593147.5814366341 seconds ---
#$@ 285
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 595230.8819043636 seconds ---
#$@ 286
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 597313.2446064949 seconds ---
#$@ 287
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 599388.5599608421 seconds ---
#$@ 288
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 601470.8970680237 seconds ---
#$@ 289
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 603550.2520284653 seconds ---
#$@ 290
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 605632.6180868149 seconds ---
#$@ 291
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 607715.1403176785 seconds ---
#$@ 292
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 609796.9801049232 seconds ---
#$@ 293
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 611872.2433140278 seconds ---
#$@ 294
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 613964.2713053226 seconds ---
#$@ 295
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 616044.1644594669 seconds ---
#$@ 296
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 618124.8111889362 seconds ---
#$@ 297
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 620217.9531478882 seconds ---
#$@ 298
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 622302.6635549068 seconds ---
#$@ 299
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 624369.9957153797 seconds ---
#$@ 300
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 626681.4336049557 seconds ---
#$@ 301
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 628747.2278006077 seconds ---
#$@ 302
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 630823.7449281216 seconds ---
#$@ 303
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 632893.9320642948 seconds ---
#$@ 304
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 634973.7171802521 seconds ---
#$@ 305
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 637036.9825384617 seconds ---
#$@ 306
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 639111.5165400505 seconds ---
#$@ 307
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 641191.002143383 seconds ---
#$@ 308
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 643270.3002228737 seconds ---
#$@ 309
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 645345.6393401623 seconds ---
#$@ 310
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 647422.543759346 seconds ---
#$@ 311
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 649490.9806802273 seconds ---
#$@ 312
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 651568.9581027031 seconds ---
#$@ 313
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 653639.0825271606 seconds ---
#$@ 314
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 655716.0833806992 seconds ---
#$@ 315
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 657785.0779953003 seconds ---
#$@ 316
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 659857.4266524315 seconds ---
#$@ 317
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 661923.9238612652 seconds ---
#$@ 318
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 664000.6966760159 seconds ---
#$@ 319
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 666075.9007613659 seconds ---
#$@ 320
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 668155.4693989754 seconds ---
#$@ 321
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 670238.7624955177 seconds ---
#$@ 322
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 672334.390150547 seconds ---
#$@ 323
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 674423.0826201439 seconds ---
#$@ 324
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 676510.4500186443 seconds ---
#$@ 325
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 678591.6919007301 seconds ---
#$@ 326
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 680676.2978565693 seconds ---
#$@ 327
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 682766.1379790306 seconds ---
#$@ 328
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 684848.8075656891 seconds ---
#$@ 329
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 686929.8381714821 seconds ---
#$@ 330
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 689013.9005386829 seconds ---
#$@ 331
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 691094.367661953 seconds ---
#$@ 332
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 693175.4401638508 seconds ---
#$@ 333
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 695258.7873952389 seconds ---
#$@ 334
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 697342.0958783627 seconds ---
#$@ 335
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 699432.7016923428 seconds ---
#$@ 336
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 701520.5875675678 seconds ---
#$@ 337
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 703606.1553599834 seconds ---
#$@ 338
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 705691.5559613705 seconds ---
#$@ 339
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 707788.004817009 seconds ---
#$@ 340
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 709854.7712609768 seconds ---
#$@ 341
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 711956.1493976116 seconds ---
#$@ 342
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 714033.1350793839 seconds ---
#$@ 343
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 716129.8252799511 seconds ---
#$@ 344
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 718204.5873348713 seconds ---
#$@ 345
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 720318.9840288162 seconds ---
#$@ 346
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 722390.2169713974 seconds ---
#$@ 347
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 724488.8540856838 seconds ---
#$@ 348
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 726573.4341425896 seconds ---
#$@ 349
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 728669.639228344 seconds ---
#$@ 350
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 730761.9712884426 seconds ---
#$@ 351
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 732864.6359083652 seconds ---
#$@ 352
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 734938.5450940132 seconds ---
#$@ 353
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 737042.528806448 seconds ---
#$@ 354
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 739124.0833289623 seconds ---
#$@ 355
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 741218.6998112202 seconds ---
#$@ 356
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 743292.888737917 seconds ---
#$@ 357
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 745397.6077339649 seconds ---
#$@ 358
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 747467.611739397 seconds ---
#$@ 359
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 749568.1264526844 seconds ---
#$@ 360
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 751643.1171483994 seconds ---
#$@ 361
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 753747.1298868656 seconds ---
#$@ 362
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 755822.682122469 seconds ---
#$@ 363
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 757932.5365011692 seconds ---
#$@ 364
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 760008.892762661 seconds ---
#$@ 365
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 762097.5718510151 seconds ---
#$@ 366
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 764168.3553261757 seconds ---
#$@ 367
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 766265.8546154499 seconds ---
#$@ 368
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 768345.8639059067 seconds ---
#$@ 369
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 770437.8962028027 seconds ---
#$@ 370
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 772510.8229866028 seconds ---
#$@ 371
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 774618.4248747826 seconds ---
#$@ 372
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 776696.0929014683 seconds ---
#$@ 373
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 778796.7052698135 seconds ---
#$@ 374
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 780869.0458712578 seconds ---
#$@ 375
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 782972.3605895042 seconds ---
#$@ 376
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 785050.0535111427 seconds ---
#$@ 377
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 787146.030711174 seconds ---
#$@ 378
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 789222.6802868843 seconds ---
#$@ 379
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 791328.8732070923 seconds ---
#$@ 380
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 793408.3201622963 seconds ---
#$@ 381
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 795501.4838340282 seconds ---
#$@ 382
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 797563.9845488071 seconds ---
#$@ 383
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 799675.0793640614 seconds ---
#$@ 384
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 801745.9575369358 seconds ---
#$@ 385
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 803847.9028122425 seconds ---
#$@ 386
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 805916.3862090111 seconds ---
#$@ 387
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 807995.8493263721 seconds ---
#$@ 388
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 810099.6761126518 seconds ---
#$@ 389
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 812186.233543396 seconds ---
#$@ 390
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 814273.592962265 seconds ---
#$@ 391
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 816356.0503528118 seconds ---
#$@ 392
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 818435.9502840042 seconds ---
#$@ 393
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 820512.1443099976 seconds ---
#$@ 394
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 822585.7994792461 seconds ---
#$@ 395
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 824666.7028827667 seconds ---
#$@ 396
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 826746.5104017258 seconds ---
#$@ 397
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 828827.5553865433 seconds ---
#$@ 398
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 830904.6637468338 seconds ---
#$@ 399
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 832993.2458102703 seconds ---
#$@ 400
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 835376.7695412636 seconds ---
#$@ 401
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 837461.2172966003 seconds ---
#$@ 402
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 839529.8381435871 seconds ---
#$@ 403
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 841612.657012701 seconds ---
#$@ 404
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 843683.1093177795 seconds ---
#$@ 405
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 845768.6777637005 seconds ---
#$@ 406
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 847836.5708496571 seconds ---
#$@ 407
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 849917.367623806 seconds ---
#$@ 408
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 851994.295753479 seconds ---
#$@ 409
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 854081.7648458481 seconds ---
#$@ 410
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 856156.907074213 seconds ---
#$@ 411
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 858239.0517029762 seconds ---
#$@ 412
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 860312.9231865406 seconds ---
#$@ 413
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 862419.8055725098 seconds ---
#$@ 414
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 864494.592790842 seconds ---
#$@ 415
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 866575.0729470253 seconds ---
#$@ 416
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 868648.9583005905 seconds ---
#$@ 417
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 870735.4614901543 seconds ---
#$@ 418
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 872806.9971725941 seconds ---
#$@ 419
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 874894.3446996212 seconds ---
#$@ 420
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 877062.4826645851 seconds ---
#$@ 421
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 879155.567917347 seconds ---
#$@ 422
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 881227.7947819233 seconds ---
#$@ 423
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 883329.8956155777 seconds ---
#$@ 424
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 885430.0745716095 seconds ---
#$@ 425
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 887524.3904426098 seconds ---
#$@ 426
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 889730.2678861618 seconds ---
#$@ 427
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 891815.8270375729 seconds ---
#$@ 428
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 894074.3616783619 seconds ---
#$@ 429
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 896153.8909113407 seconds ---
#$@ 430
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 898322.2554194927 seconds ---
#$@ 431
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 900488.9512586594 seconds ---
#$@ 432
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 902607.4183690548 seconds ---
#$@ 433
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 904828.5274949074 seconds ---
#$@ 434
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 906919.0376849174 seconds ---
#$@ 435
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 909042.1887779236 seconds ---
#$@ 436
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 911133.1397330761 seconds ---
#$@ 437
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 913250.0050694942 seconds ---
#$@ 438
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 915332.795466423 seconds ---
#$@ 439
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 917451.0003812313 seconds ---
#$@ 440
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 919536.2096180916 seconds ---
#$@ 441
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 921660.142023325 seconds ---
#$@ 442
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 923749.3982176781 seconds ---
#$@ 443
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 925851.942220211 seconds ---
#$@ 444
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 927945.6925721169 seconds ---
#$@ 445
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 930089.0062587261 seconds ---
#$@ 446
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 932183.6246447563 seconds ---
#$@ 447
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 934295.6976094246 seconds ---
#$@ 448
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 936375.1738762856 seconds ---
#$@ 449
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 938463.6125969887 seconds ---
#$@ 450
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 940550.9880363941 seconds ---
#$@ 451
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 942673.3694736958 seconds ---
#$@ 452
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 944812.1543123722 seconds ---
#$@ 453
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 947061.9046854973 seconds ---
#$@ 454
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 949147.4332046509 seconds ---
#$@ 455
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 951224.342199564 seconds ---
#$@ 456
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 953295.2585921288 seconds ---
#$@ 457
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 955386.9036517143 seconds ---
#$@ 458
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 957453.2255027294 seconds ---
#$@ 459
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 959565.1564207077 seconds ---
#$@ 460
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 961636.5457139015 seconds ---
#$@ 461
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 963741.5543422699 seconds ---
#$@ 462
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 965823.7785885334 seconds ---
#$@ 463
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 967912.4134414196 seconds ---
#$@ 464
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 969992.3174424171 seconds ---
#$@ 465
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 972073.9553875923 seconds ---
#$@ 466
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 974153.8567941189 seconds ---
#$@ 467
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 976237.0612256527 seconds ---
#$@ 468
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 978318.0173239708 seconds ---
#$@ 469
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 980430.1511030197 seconds ---
#$@ 470
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 982508.818854332 seconds ---
#$@ 471
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 984593.0324728489 seconds ---
#$@ 472
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 986659.1399781704 seconds ---
#$@ 473
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 988738.9578816891 seconds ---
#$@ 474
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 990822.5233929157 seconds ---
#$@ 475
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 992907.2238812447 seconds ---
#$@ 476
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 995001.2014899254 seconds ---
#$@ 477
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 997079.9227974415 seconds ---
#$@ 478
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 999158.5009424686 seconds ---
#$@ 479
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1001227.4391758442 seconds ---
#$@ 480
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1003301.91710639 seconds ---
#$@ 481
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1005382.6001999378 seconds ---
#$@ 482
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1007451.9282002449 seconds ---
#$@ 483
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1009520.4858286381 seconds ---
#$@ 484
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1011585.7798793316 seconds ---
#$@ 485
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1013714.3151817322 seconds ---
#$@ 486
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1015785.6318793297 seconds ---
#$@ 487
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1017845.3503119946 seconds ---
#$@ 488
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1019908.0123109818 seconds ---
#$@ 489
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1021972.0400545597 seconds ---
#$@ 490
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1024038.9629244804 seconds ---
#$@ 491
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1026108.320069313 seconds ---
#$@ 492
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1028168.502925396 seconds ---
#$@ 493
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1030217.98939538 seconds ---
#$@ 494
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1032275.5545239449 seconds ---
#$@ 495
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1034336.4819684029 seconds ---
#$@ 496
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1036397.800385952 seconds ---
#$@ 497
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1038454.3490831852 seconds ---
#$@ 498
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1040505.2979021072 seconds ---
#$@ 499
Brain
(1849, 163725) (10316, 163725)
## 0
## 10000
## 20000
## 30000
## 40000
## 50000
## 60000
## 70000
## 80000
## 90000
## 100000
## 110000
## 120000
## 130000
## 140000
## 150000
## 160000
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:76: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_t_test['ITER_{}'.format(i)]= two_tailed_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:77: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1sg_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_greater_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:78: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_1ss_wilcox['ITER_{}'.format(i)]= one_tailed_Wil_smaller_p_value_list
/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py:79: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_2s_wilcox['ITER_{}'.format(i)]= two_tailed_Wil_p_value_list
--- 1042544.0361874104 seconds ---
Traceback (most recent call last):
  File "/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py", line 116, in <module>
    temp_df_empirical['1SidedTTest_empirical_p_value'] = df_1s_t_test.apply(count, axis = 1).values
  File "/home/campus.stonybrook.edu/pdutta/anaconda3/envs/rapid_sampling/lib/python3.9/site-packages/pandas/core/frame.py", line 8848, in apply
    return op.apply().__finalize__(self, method="apply")
  File "/home/campus.stonybrook.edu/pdutta/anaconda3/envs/rapid_sampling/lib/python3.9/site-packages/pandas/core/apply.py", line 733, in apply
    return self.apply_standard()
  File "/home/campus.stonybrook.edu/pdutta/anaconda3/envs/rapid_sampling/lib/python3.9/site-packages/pandas/core/apply.py", line 857, in apply_standard
    results, res_index = self.apply_series_generator()
  File "/home/campus.stonybrook.edu/pdutta/anaconda3/envs/rapid_sampling/lib/python3.9/site-packages/pandas/core/apply.py", line 873, in apply_series_generator
    results[i] = self.f(v)
  File "/home/campus.stonybrook.edu/pdutta/Github/Postdoc/Pallavi_subsampling/stratified_subsampling_optimized_all_test_new.py", line 102, in count
    r = np.sum(df >= 0.05)
  File "/home/campus.stonybrook.edu/pdutta/anaconda3/envs/rapid_sampling/lib/python3.9/site-packages/pandas/core/ops/common.py", line 70, in new_method
    return method(self, other)
  File "/home/campus.stonybrook.edu/pdutta/anaconda3/envs/rapid_sampling/lib/python3.9/site-packages/pandas/core/arraylike.py", line 60, in __ge__
    return self._cmp_method(other, operator.ge)
  File "/home/campus.stonybrook.edu/pdutta/anaconda3/envs/rapid_sampling/lib/python3.9/site-packages/pandas/core/series.py", line 5623, in _cmp_method
    res_values = ops.comparison_op(lvalues, rvalues, op)
  File "/home/campus.stonybrook.edu/pdutta/anaconda3/envs/rapid_sampling/lib/python3.9/site-packages/pandas/core/ops/array_ops.py", line 283, in comparison_op
    res_values = comp_method_OBJECT_ARRAY(op, lvalues, rvalues)
  File "/home/campus.stonybrook.edu/pdutta/anaconda3/envs/rapid_sampling/lib/python3.9/site-packages/pandas/core/ops/array_ops.py", line 73, in comp_method_OBJECT_ARRAY
    result = libops.scalar_compare(x.ravel(), y, op)
  File "pandas/_libs/ops.pyx", line 107, in pandas._libs.ops.scalar_compare
TypeError: '>=' not supported between instances of 'str' and 'float'
